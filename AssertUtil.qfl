''''''''''''''''''''''''''''''''''''''''''
' @defgroup: AssertUtil UTIL_AssertUtil
' This is the function group for assertions and checkpoints
' 
' List of functions here
' Test for Build 9 change
' @code
'   Function UTIL_AssertTrue(boolExpression, strEvent, strDetails)
'   Function UTIL_AssertFalse(boolExpression, strEvent, strDetails)
'   Function UTIL_AssertNull(theVal, strEvent, strDetails)
'   Function UTIL_AssertNotNull(ByRef theVal, strEvent, strDetails)
'   Function UTIL_AssertNothing(ByRef objVal, strEvent, strDetails)
'   Function UTIL_AssertNotNothing(ByRef objVal, strEvent, strDetails)
'   Function UTIL_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function UTIL_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'   Function UTIL_AssertEmpty(ByRef objVal, strEvent, strDetails)
'   Function UTIL_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
'   Private Function UTIL_ValidateTrue(boolExpression,strEvent,strDetails,strSource)
' @endcode
'
' @{
''''''''''''''''''''''''''''''''''''''''''



'Assertion to see if specified expression evaluates to true
'@code
'   UTIL_AssertTrue 11=2, "error source", "The validation has failed"
'   UTIL_AssertTrue False, "", ""
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertTrue(boolExpression, strEvent, strDetails)
    UTIL_AssertTrue = UTIL_ValidateTrue(boolExpression, strEvent, strDetails, "UTIL_AssertTrue")
End Function
	
    
    
'Assertion to see if specified expression evaluates to false
'@code
'    UTIL_AssertFalse(boolExpression, strEvent, strDetails)
'@endcode
'@param boolExpression - expression to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertFalse(boolExpression, strEvent, strDetails)
    UTIL_AssertFalse = UTIL_ValidateTrue((not boolExpression), strEvent, strDetails, "UTIL_AssertFalse")
End Function



'Assertion to see if specified variant is null
'@code
'    UTIL_AssertNull(theVal, strEvent, strDetails)
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNull(theVal, strEvent, strDetails)
    UTIL_AssertNull = UTIL_ValidateTrue(IsNull(theVal), strEvent, strDetails, "UTIL_AssertNull")
End Function



'Assertion to see if specified variant is not null
'@code
'    UTIL_AssertNotNull(ByRef theVal, strEvent, strDetails)
'@endcode
'@param theVal - variant to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNotNull(ByRef theVal, strEvent, strDetails)
    UTIL_AssertNotNull = UTIL_ValidateTrue((Not IsNull(theVal)), strEvent, strDetails, "UTIL_AssertNotNull")
End Function



'Assertion to see if variable refers to nothing
'@code
'    UTIL_AssertNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNothing(ByRef objVal, strEvent, strDetails)
    UTIL_AssertNothing = UTIL_ValidateTrue(objVal Is Nothing, strEvent, strDetails, "UTIL_AssertNothing")
End Function



'Assertion to see if variable is initialized or has a reference
'@code
'    UTIL_AssertNotNothing(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNotNothing(ByRef objVal, strEvent, strDetails)
    UTIL_AssertNotNothing = UTIL_ValidateTrue(Not objVal Is Nothing, strEvent, strDetails, "UTIL_AssertNotNothing")
End Function



'Assertion to see if two variables hold the same value
'@code
'    UTIL_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    UTIL_AssertEqual = UTIL_ValidateTrue(val1=val2, strEvent, strDetails, "UTIL_AssertEqual")
End Function



'Assertion to see if two variables hold different values
'@code
'    UTIL_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
'@endcode
'@param val1 - variant to be compared
'@param val2 - variant to be compared
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNotEqual(ByRef val1, ByRef val2, strEvent, strDetails)
    UTIL_AssertNotEqual = UTIL_ValidateTrue((Not val1=val2), strEvent, strDetails, "UTIL_AssertNotEqual")
End Function



'Assertion to see if a variable is uninitialized
'@code
'    UTIL_AssertEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertEmpty(ByRef objVal, strEvent, strDetails)
   UTIL_AssertEmpty = UTIL_ValidateTrue(IsEmpty(objVal), strEvent, strDetails, "UTIL_AssertEmpty")
End Function



'Assertion to see if a variable is initialized
'@code
'    UTIL_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
'@endcode
'@param objVal - object to be checked
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@return if validation passes, return True; if validation fails, return False
'@see UTIL_ValidateTrue

Function UTIL_AssertNotEmpty(ByRef objVal, strEvent, strDetails)
   UTIL_AssertNotEmpty = UTIL_ValidateTrue(Not IsEmpty(objVal), strEvent, strDetails, "UTIL_AssertNotEmpty")
End Function



'Validation to see if the specificed expression is true <br>
'@code
'    UTIL_ValidateTrue(boolExpression,strEvent,strDetails,strSource)
'@endcode
'If strSource is a checkpoint, a runtime error will be raised
'@param boolExpression - expression to be evaluated
'@param strEvent - event description to be reported if check returns false
'@param strDetails - detail message to be reported if check returns false
'@param strSource - description of caller method
'@return if validation passes, return True; if validation fails, return False

Private Function UTIL_ValidateTrue(boolExpression,strEvent,strDetails,strSource)
	UTIL_ValidateTrue = boolExpression
	If Not(boolExpression) Then Err.raise vbObjectError+100, strSource, "["&strSource&"] "& strEvent&" - " & strDetails
End Function

'@}